############
#WGCNA to associate the taxa from the Random forest to healthy or diseased plants
############
######do as in the soil microbiome composition and start from the file data_otu_taxo_filt_rar

##############needs a column with total counts for each sample
####create column in data_otu_filt_rar with the total sum
data_otu_filt_rar-> table_total_sum
table_total_sum2=as.data.frame(t(as.matrix(table_total_sum[,1:dim(table_total_sum)[2]])))
table_total_sum3=table_total_sum2[c(1:154),]
####start with table_total_sum2 ####cols are ASVs and rownames are samples

library(tidyverse)
library(ggpubr)
library(rstatix)
library(WGCNA);
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);

datExpr0 =  mutate_all(table_total_sum3, function(x) as.numeric(as.character(x)));
gsg = goodSamplesGenes(datExpr0, verbose = 3);
gsg$allOK

sampleTree = hclust(dist(datExpr0), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
tiff("tree_WGCNA.tiff",res=300,he=300,wi=310,units="mm")
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
# Plot a line to show the cut
dev.off()
###not remove samples
datExpr = datExpr0
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)


######TRAITS for coorrelation
data_grp_temp <- metadata
data_grp_temp$sample_id <- rownames(data_grp_temp) 


traitData = data_grp_temp
dim(traitData)
names(traitData)
# remove columns that hold information we do not need.
allTraits = traitData[, -c(2,5,7,8,9,11)];
write.table(allTraits,"WGCNA_traits_to_transform",sep="\t") ###check manually
allTraits=read.table("WGCNA_traits_transformed",sep="\t",header=T,row.names=1)

##########NEEDS NUMERIC INPUT SO TRANSFORM TO COMPOST=0 and CONTROL=0, Healthy=1, Disease=2
dim(allTraits)
names(allTraits)
# Form a data frame analogous to expression data that will hold the clinical traits.
Samples = rownames(datExpr);
traitRows = match(Samples, rownames(allTraits));
datTraits = allTraits[traitRows, ];

collectGarbage();

########REPLOT
# Re-cluster samples
tiff("tree_WGCNA_traits.tiff",res=300,he=300,wi=310,units="mm")
sampleTree2 = hclust(dist(datExpr), method = "average")
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors = numbers2colors(datTraits, signed = FALSE);
# Plot the sample dendrogram and the colors underneath.
plotDendroAndColors(sampleTree2, traitColors,
groupLabels = names(datTraits),
main = "Sample dendrogram and trait heatmap")
dev.off()
enableWGCNAThreads()
# Load the data saved in the first

####check softthreshold for network
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
# Plot the results:
  Power SFT.R.sq slope truncated.R.sq mean.k. median.k. max.k.
1      1    0.364 -2.37          0.935 269.000  2.58e+02  555.0
2      2    0.731 -1.56          0.908  60.300  4.79e+01  193.0
3      3    0.847 -1.65          0.914  23.800  1.36e+01  119.0
4      4    0.854 -1.53          0.908  12.900  5.53e+00   84.7
5      5    0.837 -1.48          0.900   8.150  2.59e+00   65.8
6      6    0.822 -1.44          0.900   5.670  1.35e+00   52.7
7      7    0.873 -1.33          0.933   4.180  7.49e-01   42.9
8      8    0.918 -1.25          0.967   3.220  4.34e-01   35.6
9      9    0.915 -1.29          0.972   2.550  2.66e-01   32.1
10    10    0.892 -1.32          0.967   2.070  1.60e-01   29.3
11    12    0.916 -1.34          0.984   1.450  6.51e-02   25.0
12    14    0.926 -1.34          0.983   1.060  2.72e-02   21.7
13    16    0.933 -1.35          0.975   0.816  1.18e-02   19.0
14    18    0.904 -1.36          0.936   0.646  5.17e-03   16.8
15    20    0.909 -1.34          0.931   0.525  2.45e-03   15.0

##use softthreshold 8 
net = blockwiseModules(datExpr, power = 8,
TOMType = "signed", minModuleSize = 30,networkType = "signed",
reassignThreshold = 0, mergeCutHeight = 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = TRUE,
saveTOMFileBase = "/mnt/lustre/groups/bio-ash-2019/soil_FERA/plots/news/TOM",
verbose = 3,deepSplit = 4)


moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs;


nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);

###plot heatmap modules with the traits
tiff("WGCNA_heatmap.tiff",res=300,he=300,wi=310,units="mm")
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
dev.off()

####### to create the table and understand each taxa significance with disesed and healthy traits
Disease = as.data.frame(datTraits$Disease);
names(Disease) = "Disease"
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance_disease = as.data.frame(cor(datExpr, Disease, use = "p"));
GSPvalue_disease = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance_disease) = paste("GS.", names(Disease), sep="");
names(GSPvalue_disease) = paste("p.GS.", names(Disease), sep="");



#######
Healthy = as.data.frame(datTraits$Healthy);
names(Healthy) = "Healthy"
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance_healthy = as.data.frame(cor(datExpr, Healthy, use = "p"));
GSPvalue_healthy = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance_healthy) = paste("GS.", names(Healthy), sep="");
names(GSPvalue_healthy) = paste("p.GS.", names(Healthy), sep="");

###create final table 
names(datExpr)
annot = data_taxo_filt_rar
dim(annot)
names(annot)
####ono
probes = names(datExpr0)
head(probes)
probes2annot = match(probes, annot$OTU_num)
# The following is the number or probes without annotation:
sum(is.na(probes2annot))
geneInfo0 = data.frame(Genes = probes,
                       moduleColor = moduleColors,
                       geneTraitSignificance_disease,
                       GSPvalue_disease,geneTraitSignificance_healthy,GSPvalue_healthy)
library(tidyverse)
geneInfo_annota=left_join(geneInfo0,annot,by=c("Genes"="OTU_num"))
write.table(geneInfo_annota,"/mnt/lustre/groups/bio-ash-2019/soil_FERA/plots/news/WGCNA_info_table_annota.txt",sep="\t",col.names=T)
